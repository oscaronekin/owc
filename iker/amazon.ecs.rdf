<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd" https="true">
    <meta>
        <author>IKER AZPEITIA</author>
        <description>RDFIZER FOR Amazon</description>
        <documentationURL><!-- url for API documentation --></documentationURL>
        <apiKeyURL><!-- url for getting an API key if needed --></apiKeyURL>
        <sampleQuery></sampleQuery>    
    </meta>    
    <execute><![CDATA[
        y.include("http://associates-amazon.s3.amazonaws.com/signed-requests/helper/jssha2/sha2.js");
        function getSignedURL(unsignedUrl, accessKey, secretKey) {
          var lines = unsignedUrl.split("\n");
          unsignedUrl = "";
          for (var i in lines) { unsignedUrl += lines[i]; }
                // find host and query portions
                var urlregex = new RegExp("^http:\\/\\/(.*)\\/onca\\/xml\\?(.*)$");
                var matches = urlregex.exec(unsignedUrl);
          if (matches == null) {
            alert("Could not find PA-API end-point in the URL. Please ensure the URL looks like the example provided.");
            return;
          }
          var host = matches[1].toLowerCase();
          var query = matches[2];
          // split the query into its constituent parts
          var pairs = query.split("&");
          // remove signature if already there
          // remove access key id if already present
          //  and replace with the one user provided above
          // add timestamp if not already present
          pairs = cleanupRequest(pairs, accessKey);
          // encode the name and value in each pair
          pairs = encodeNameValuePairs(pairs);
          // sort them and put them back together to get the canonical query string
          pairs.sort();
          var canonicalQuery = pairs.join("&");
          var stringToSign = "GET\n" + host + "\n/onca/xml\n" + canonicalQuery;
          // calculate the signature
          var secret = secretKey;
          var signature = sign(secret, stringToSign);
          // assemble the signed url
          var signedUrl = "http://" + host + "/onca/xml?" + canonicalQuery + "&Signature=" + signature;
          return signedUrl;
        }
      function encodeNameValuePairs(pairs) {
        for (var i = 0; i < pairs.length; i++) {
          var name = "";
          var value = "";
          var pair = pairs[i];
          var index = pair.indexOf("=");
          // take care of special cases like "&foo&", "&foo=&" and "&=foo&"
          if (index == -1) {
            name = pair;
          } else if (index == 0) {
            value = pair;
          } else {
            name = pair.substring(0, index);
            if (index < pair.length - 1) {
              value = pair.substring(index + 1);
            }
          }
	  // decode and encode to make sure we undo any incorrect encoding
          name = encodeURIComponent(decodeURIComponent(name));
	  value = value.replace(/\+/g, "%20");
          value = encodeURIComponent(decodeURIComponent(value));
          pairs[i] = name + "=" + value;
        }
        return pairs;
      }
      function cleanupRequest(pairs, accessKey) {
        var haveTimestamp = false;
	      var haveAwsId = false;
        var accessKeyId = accessKey;
        var nPairs = pairs.length;
        var i = 0;
        while (i < nPairs) {
          var p = pairs[i];
          if (p.search(/^Timestamp=/) != -1) {
            haveTimestamp = true;
          } else if (p.search(/^(AWSAccessKeyId|SubscriptionId)=/) != -1) {
            pairs.splice(i, 1, "AWSAccessKeyId=" + accessKeyId);
	    haveAwsId = true;
          } else if (p.search(/^Signature=/) != -1) {
            pairs.splice(i, 1);
            i--;
            nPairs--;
          }
          i++;
        }
        if (!haveTimestamp) {
          pairs.push("Timestamp=" + getNowTimeStamp());
        }
	if (!haveAwsId) {
	  pairs.push("AWSAccessKeyId=" + accessKeyId);
	}
        return pairs;
      }
  function sign(secret, message) {
        var messageBytes = str2binb(message);
        var secretBytes = str2binb(secret);
        if (secretBytes.length > 16) {
            secretBytes = core_sha256(secretBytes, secret.length * chrsz);
        }
        var ipad = Array(16), opad = Array(16);
        for (var i = 0; i < 16; i++) {
            ipad[i] = secretBytes[i] ^ 0x36363636;
            opad[i] = secretBytes[i] ^ 0x5C5C5C5C;
        }
        var imsg = ipad.concat(messageBytes);
        var ihash = core_sha256(imsg, 512 + message.length * chrsz);
        var omsg = opad.concat(ihash);
        var ohash = core_sha256(omsg, 512 + 256);
        var b64hash = binb2b64(ohash);
        var urlhash = encodeURIComponent(b64hash);
        return urlhash;
      }
      Date.prototype.toISODate =
	      new Function("with (this)\n    return " +
		 "getFullYear()+'-'+addZero(getMonth()+1)+'-'" +
		 "+addZero(getDate())+'T'+addZero(getHours())+':'" +
		 "+addZero(getMinutes())+':'+addZero(getSeconds())+'.000Z'");
  function addZero(n) {
    	  return ( n < 0 || n > 9 ? "" : "0" ) + n;
      }
  function getNowTimeStamp() {
       var time = new Date();
        var gmtTime = new Date(time.getTime() + (time.getTimezoneOffset() * 60000));
        return gmtTime.toISODate() ;
      }
      ]]>
       <![CDATA[  y.include('https://raw.githubusercontent.com/onekin/owc/master/iker/ld.js'); // LD.js.       
default xml namespace = "http://webservices.amazon.com/AWSECommerceService/2011-08-01"; //E4X namespace
function encodeOffer(id){
  var begin = id.indexOf("%");
  if (begin> -1){id=id.substring(0,begin);}
  return id;}	
function encodeSubjectUri(subject){return "http://dbpedia.org/resource/"+ encodeURIComponent(subject);}
i= 0;
function nextReviewURI(){
	i++;
	return URI.replace("/book/","/review/")+"/num/"+i;}
sourceCount=0;
function isTheReviewSourceNum(source){
	var number = URI.substring(URI.lastIndexOf("/")).replace(/\//g,'');
	sourceCount++;
	if (number==sourceCount){return source;}}
contentCount=0;
function isTheReviewContentNum(content){
	var number = URI.substring(URI.lastIndexOf("/")).replace(/\//g,'');
	contentCount++;
	if (number==contentCount){return encodeURIComponent(content);}}
function encodeAmazonAuthorURI(author){	return "http://rdf.onekin.org/amazon.ecs.rdf/person/"+ encodeURIComponent(author);}
function isOurPerson(author){
	if (encodeAmazonAuthorURI(author) == URI){return URI;}
	else{return null;}}
function encodeDBLPAuthorIsOurPerson(author){
	if (isOurPerson(author) != null){return "http://rdf.onekin.org/dblp.rdf/person/"+ encodeURIComponent(author);}
	else{return null;}}
function encodeISBN(isbn){return "urn:ISBN:"+ isbn;}
function encodeOfferURI(id){return URI.replace("/book/","/offer/")+"/offerid/"+encodeOffer(id);}
function encodeAmazonBookURI(id) { return "http://rdf.onekin.org/amazon.ecs.rdf/book/isbn/"+id;}
function encodeGoogleBookURI(id){ return "http://rdf.onekin.org/google.books.rdf/book/isbn/"+id;}
function encodeAmazonBookURIASIN(id){ return "http://rdf.onekin.org/amazon.ecs.rdf/book/isbn/"+id;} ]]>
    </execute> 
    <bindings><!--executors-->
        <select itemPath="ItemSearchResponse.Items.Item" produces="XML">
            <paging model="page">
                <start id="ItemPage" default="1" />
                <pagesize id="Count" max="25" />
                <total default="10" />
            </paging>
            <urls>
                <url>http://ecs.amazonaws.com/onca/xml?Service=AWSECommerceService&amp;Version=2008-08-19</url>
            </urls>
            <inputs>
                <key id="Operation" type="xs:string" paramType="query" required="false"
                     default="ItemSearch"/>
                <key id="Keywords" type="xs:string" paramType="query" required="true"/>
                <key id="AWSAccessKeyId" type="xs:string" paramType="query" required="true"/>
                <key id="secret" type="xs:string" paramType="variable" required="true"/>
                <key id="SearchIndex" type="xs:string" paramType="query" required="false"
                     default="Books"/>
                <key id="ResponseGroup" type="xs:string" paramType="query" required="false"/>
                <key id="AssociateTag" type="xs:string" paramType="query" required="false"/>
                <key id="Sort" type="xs:string" paramType="query" required="false"/>
            </inputs>
          <execute><![CDATA[
            var signeduri = getSignedURL(request.url, AWSAccessKeyId, secret);
            response.object = y.rest(signeduri).get().response;
          ]]></execute>
        </select>
        <select itemPath="ItemLookupResponse.Items.Item" produces="XML">
            <paging model="page">
                <start id="ItemPage" default="1" />
                <pagesize id="Count" max="25" />
                <total default="10" />
            </paging>
            <urls>
                <url>http://ecs.amazonaws.com/onca/xml?Service=AWSECommerceService</url>
            </urls>
            <inputs>
                <key id="Operation" type="xs:string" paramType="query" required="false"
                     default="ItemLookup"/>
                <key id="ItemId" type="xs:string" paramType="query" required="true"/>
                <key id="MerchantId" type="xs:string" paramType="query" required="false"/>
                <key id="AWSAccessKeyId" type="xs:string" paramType="query" required="true"/>
                <key id="secret" type="xs:string" paramType="variable" required="true"/>
                <key id="ResponseGroup" type="xs:string" paramType="query" required="false"/>
                <key id="AssociateTag" type="xs:string" paramType="query" required="false"/>
                <key id="Sort" type="xs:string" paramType="query" required="false"/>
                <key id="Version" type="xs:string" paramType="query" required="false"
                     default="2009-03-31"/>
            </inputs>
            <execute><![CDATA[
              var signeduri = getSignedURL(request.url, AWSAccessKeyId, secret);
              response.object = y.rest(signeduri).get().response;
            ]]></execute>
        </select>
        
         <select itemPath="results.RDF" produces="XML"> <!--LOWERIGN Book--> 
              <inputs>
                <key id="URI" type="xs:string" paramType="variable" required="true"/>
                <key id="isbn" type="xs:string" paramType="variable" required="true"/>
              </inputs>
            <execute><![CDATA[
LD.rdfize("select * from amazon.ecs.rdf where ItemId=@isbn and ResponseGroup='Large'");]]>
             </execute>
        </select>                        
        <function name="book" ><!--LIFTING Book-->
           <inputs>
               <pipe id="tuple" paramType="variable" type="xs:string"/> 
               <key id="URI" type="xs:string" paramType="variable" required="true"/>
            </inputs>    
          <execute> <![CDATA[ //RDFication
//default xml namespace = "http://webservices.amazon.com/AWSECommerceService/2011-08-01"; //E4X namespace
y.log(tuple.ASIN);
var itemresource = LD.createInstance(URI);
itemresource.addNameSpace("scom","http://sites.wiwiss.fu-berlin.de/suhl/bizer/bookmashup/simpleCommerceVocab01.rdf#");
itemresource.addProperty("rdf:type" ,"scom:Book");
itemresource.addNameSpace("owl","http://www.w3.org/2002/07/owl#");
itemresource.addProperty("owl:sameAs", URI.replace("/amazon.ecs.rdf","/google.books.rdf"));
itemresource.addProperty("rdfs:label", tuple.ItemAttributes.Title);
itemresource.addNameSpace("dc","http://purl.org/dc/elements/1.1/");
itemresource.addProperty("dc:date", tuple.ItemAttributes.PublicationDate);
itemresource.addProperty("dc:title", tuple.ItemAttributes.Title);
itemresource.addNameSpace("foaf","http://xmlns.com/foaf/0.1/");
itemresource.addProperty("foaf:depiction", tuple.LargeImage.URL);
itemresource.addProperty("foaf:thumbnail", tuple.SmallImage.URL);
itemresource.addProperty("dc:identifier", tuple.ItemAttributes.ISBN, encodeISBN);  
itemresource.addProperty("dc:publisher", tuple.ItemAttributes.Label);
itemresource.addProperty("dc:format", tuple.ItemAttributes.Format);
itemresource.addProperty("dc:format", tuple.ItemAttributes.Binding);
itemresource.addNameSpace("rev","http://dannyayers.com/xmlns/rev/#");
itemresource.addProperty("rev:hasReview", tuple.EditorialReviews.EditorialReview, nextReviewURI);
itemresource.addProperty ("dc:creator", tuple.ItemAttributes.Author, encodeAmazonAuthorURI);
itemresource.addProperty ("dc:creator", tuple.ItemAttributes.Creator, encodeAmazonAuthorURI);
itemresource.addNameSpace("skos","http://www.w3.org/2004/02/skos/core#");
itemresource.addProperty ("skos:subject", tuple.BrowseNodes.BrowseNode.Name, encodeSubjectUri);
itemresource.addProperty ("scom:hasOffer", tuple.Offers.Offer.OfferListing.OfferListingId,encodeOfferURI);
LD.serialize()
y.log('llo'+tuple.ItemAttributes.Title);]]>   
            </execute>
           </function>           
         <select itemPath="results.RDF" produces="XML"> <!--LOWERIGN Offer-->
              <inputs>
                <key id="URI" type="xs:string" paramType="variable" required="true"/>
                <key id="isbn" type="xs:string" paramType="variable" required="true"/>
				<key id="offerid" type="xs:string" paramType="variable" required="true"/>				
              </inputs>
            <execute><![CDATA[
LD.addVariable ("offerid", offerid+"%");
LD.rdfize("select Offers.Offer from amazon.ecs.rdf where ItemId=@isbn and ResponseGroup='Large' and Offers.Offer.OfferListing.OfferListingId LIKE @offerid");]]>
             </execute>
        </select>                
         <function name="offer" ><!--LIFTING Offer-->
           <inputs>
               <pipe id="tuple" paramType="variable" type="xs:string"/>
               <key id="URI" paramType="variable" type="xs:string"  required="true"/>
            </inputs>    
          <execute> <![CDATA[ //RDFication
var itemresource = LD.createInstance(URI);
itemresource.addNameSpace("gr", "http://purl.org/goodrelations/v1#");
itemresource.addProperty("rdf:type" ,"gr:Offering");
itemresource.addProperty("gr:hasCurrencyValue", tuple.Offers.Offer.OfferListing.Price.Amount);
itemresource.addProperty("gr:hasCurrency", tuple.Offers.Offer.OfferListing.Price.CurrencyCode);
LD.serialize();]]>   
            </execute>
      </function>  
   <select itemPath="results.RDF" produces="XML"> <!--LOWERIGN Person-->
              <inputs>
                <key id="URI" type="xs:string" paramType="variable" required="true"/>
                <key id="author" type="xs:string" paramType="variable" required="true"/>				
              </inputs>
            <execute><![CDATA[
LD.rdfize("select * from amazon.ecs.rdf where Keywords=@author and ResponseGroup='Large' and ItemAttributes.Author = @author");]]>
            </execute>
      </select>       
        <function name="person" ><!--LIFTING Person-->
           <inputs>
               <pipe id="tuple" paramType="variable" type="xs:string"/>
               <key id="URI" paramType="variable" type="xs:string"  required="true"/>
            </inputs>    
          <execute> <![CDATA[ //RDFication
var itemresource = LD.createInstance(URI);
itemresource.addNameSpace("foaf","http://xmlns.com/foaf/0.1/");
itemresource.addProperty("foaf:name", tuple.ItemAttributes.Author, isOurPerson);
itemresource.addNameSpace("owl","http://www.w3.org/2002/07/owl#");
itemresource.addProperty("owl:sameAs", tuple.ItemAttributes.Author, encodeDBLPAuthorIsOurPerson);
itemresource.addNameSpace("dblp","http://sw.deri.org/~aharth/2004/07/dblp/dblp.owl");
itemresource.addProperty("dblp:Book", tuple.ItemAttributes.ISBN, encodeAmazonBookURI);
itemresource.addProperty("dblp:Book", tuple.ItemAttributes.EISBN, encodeAmazonBookURI);
itemresource.addProperty("dblp:Book", tuple.ItemAttributes.ISBN, encodeGoogleBookURI);
itemresource.addProperty("dblp:Book", tuple.ItemAttributes.EISBN, encodeGoogleBookURI);
itemresource.addProperty("dblp:Book", tuple.ASIN, encodeAmazonBookURIASIN);
LD.serialize();
            ]]>   
            </execute>
      </function>       
        <select itemPath="results.RDF" produces="XML"> <!--LOWERIGN Review-->
              <inputs>
                <key id="URI" type="xs:string" paramType="variable" required="true"/>
                <key id="isbn" type="xs:string" paramType="variable" required="true"/>
                <key id="num" type="xs:string" paramType="variable" required="true"/>
              </inputs>
            <execute><![CDATA[
LD.rdfize("select * from amazon.ecs.rdf where ItemId=@isbn and ResponseGroup='Large'");]]>
             </execute>
        </select>       
        <function name="review" ><!--LIFTING Review-->
           <inputs>
               <pipe id="tuple" paramType="variable" type="xs:string"/>
               <key id="URI" paramType="variable" type="xs:string"  required="true"/>
            </inputs>    
          <execute> <![CDATA[ //RDFication
var itemresource = LD.createInstance(URI);
itemresource.addNameSpace("rev","http://dannyayers.com/xmlns/rev/#");
itemresource.addProperty("rdf:type" ,"rev:Review");
itemresource.addProperty("rev:reviewer", tuple.EditorialReviews.EditorialReview.Source, isTheReviewSourceNum);
itemresource.addProperty("rev:text", tuple.EditorialReviews.EditorialReview.Content, isTheReviewContentNum);
LD.serialize();]]> 
            </execute>
      </function>     
    </bindings>
</table>
